<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movie Seat Booking - Real Time</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .screen {
            background: #ccc;
            height: 70px;
            width: 100%;
            margin: 15px 0;
            transform: rotateX(-45deg);
            box-shadow: 0 3px 10px rgba(255,255,255,0.7);
            text-align: center;
            line-height: 70px;
            font-weight: bold;
        }
        .seat-container {
            perspective: 1000px;
            margin: 40px 0;
        }
        .row {
            display: flex;
            justify-content: center;
            margin: 5px;
        }
        .seat {
            background-color: #444451;
            height: 30px;
            width: 35px;
            margin: 3px;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .seat.selected {
            background-color: #6feaf6;
            transform: scale(1.1);
        }
        .seat.occupied {
            background-color: #fff;
            cursor: not-allowed;
        }
        .seat.temporarily-blocked {
            background-color: #ffc107;
            cursor: not-allowed;
            animation: pulse 2s infinite;
        }
        .seat:not(.occupied):not(.temporarily-blocked):hover {
            cursor: pointer;
            transform: scale(1.2);
        }
        .showcase .seat:not(.occupied):hover {
            cursor: default;
            transform: scale(1);
        }
        .showcase {
            background: rgba(0,0,0,0.1);
            padding: 5px 10px;
            border-radius: 5px;
            color: #777;
            list-style-type: none;
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
        }
        .showcase li {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 10px;
        }
        .showcase li small {
            margin-left: 2px;
        }
        .row-label {
            margin-right: 10px;
            width: 30px;
            text-align: right;
            line-height: 35px;
            font-weight: bold;
            color: #ccc;
        }
        #connection-status {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 8px 16px;
            border-radius: 4px;
            color: white;
            font-weight: bold;
            z-index: 1000;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        #connection-status::before {
            content: '';
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: currentColor;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.2); }
            100% { opacity: 1; transform: scale(1); }
        }
    </style>
</head>
<body class="bg-dark text-light">
    <div id="connection-status">Connecting...</div>
    <div class="container mt-5">
        <h1 class="text-center mb-4">🎬 Movie Seat Booking</h1>

        <!-- Movie Selection -->
        <div class="row mb-4">
            <div class="col-md-6 mx-auto">
                <div class="form-group">
                    <label for="movieSelect" class="form-label">Select Movie</label>
                    <select class="form-control" id="movieSelect" required>
                        <option value="">Choose a movie...</option>
                        <% movies.forEach(movie => { %>
                            <option 
                                value="<%= movie.name %>" 
                                data-price="<%= movie.price %>" 
                                data-movie-id="<%= movie.id %>"
                                <%= selectedMovie && selectedMovie.id === movie.id ? 'selected' : '' %>
                            >
                                <%= movie.name %> - ₹<%= movie.price %>
                            </option>
                        <% }); %>
                    </select>
                </div>
            </div>
        </div>

        <!-- User Details -->
        <div class="row mb-4">
            <div class="col-md-6 mx-auto">
                <div class="form-group mb-3">
                    <label for="name" class="form-label">Your Name</label>
                    <input type="text" class="form-control" id="name" placeholder="Enter your full name" required>
                </div>
                <div class="form-group mb-3">
                    <label for="email" class="form-label">Email Address</label>
                    <input type="email" class="form-control" id="email" placeholder="Enter your email" required>
                </div>
            </div>
        </div>
        
        <ul class="showcase">
            <li>
                <div class="seat"></div>
                <small>Available</small>
            </li>
            <li>
                <div class="seat selected"></div>
                <small>Selected</small>
            </li>
            <li>
                <div class="seat temporarily-blocked"></div>
                <small>Booking in Progress</small>
            </li>
            <li>
                <div class="seat occupied"></div>
                <small>Booked</small>
            </li>
        </ul>

        <div class="seat-container">
            <div class="screen">🎬 SCREEN 🎬</div>
            
            <% const rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q']; %>
            <% rows.forEach(row => { %>
                <div class="d-flex align-items-center">
                    <div class="row-label"><%= row %></div>
                    <div class="row">
                        <% for(let i = 1; i <= 26; i++) { %>
                            <div class="seat" data-seat="<%= row + i %>"></div>
                        <% } %>
                    </div>
                </div>
            <% }); %>
        </div>

        <div class="text-center mt-4">
            <p>Selected Seats: <span id="selected-seats">None selected</span></p>
            <p>Total Amount: ₹<span id="total-price">0</span></p>
            <button class="btn btn-primary btn-lg" id="book-btn" disabled>Book Tickets</button>
        </div>
    </div>

    <script>
        let socket;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;
        const reconnectDelay = 3000; // 3 seconds

        function updateConnectionStatus(status, message) {
            const statusElement = document.getElementById('connection-status');
            statusElement.textContent = message;
            
            switch (status) {
                case 'connecting':
                    statusElement.style.backgroundColor = '#ff9800';
                    break;
                case 'connected':
                    statusElement.style.backgroundColor = '#4CAF50';
                    break;
                case 'disconnected':
                    statusElement.style.backgroundColor = '#f44336';
                    break;
                case 'error':
                    statusElement.style.backgroundColor = '#ff9800';
                    break;
            }
        }

        function connectWebSocket(movieId) {
            // Get the base URL from the environment
            const isProduction = window.location.hostname.includes('vercel.app');
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            let wsUrl;

            if (isProduction) {
                // For Vercel deployment
                wsUrl = `${wsProtocol}//${window.location.host}/ws`;
            } else {
                // For local development
                wsUrl = `ws://localhost:3001/ws`;
            }

            // Add movieId as query parameter if provided
            if (movieId) {
                wsUrl += `?movieId=${movieId}`;
            }

            if (socket && socket.readyState !== WebSocket.CLOSED) {
                console.log('Socket is already connected or connecting');
                return;
            }

            updateConnectionStatus('connecting', '🔄 Connecting...');
            console.log('Attempting to connect to WebSocket:', wsUrl);
            
            try {
                // Create new WebSocket connection with error handling
                socket = new WebSocket(wsUrl);
                
                socket.onopen = () => {
                    console.log('WebSocket connected successfully to:', wsUrl);
                    updateConnectionStatus('connected', '🟢 Connected');
                    reconnectAttempts = 0;

                    // Join movie room if movieId is provided
                    if (movieId) {
                        try {
                            socket.send(JSON.stringify({
                                type: 'join_movie',
                                movieId
                            }));
                            console.log('Joined movie room:', movieId);
                        } catch (error) {
                            console.error('Failed to join movie room:', error);
                        }
                    }
                };
                
                socket.onclose = (event) => {
                    console.log('WebSocket disconnected:', event.code, event.reason);
                    updateConnectionStatus('disconnected', '🔴 Disconnected');
                    
                    if (reconnectAttempts < maxReconnectAttempts) {
                        reconnectAttempts++;
                        const delay = Math.min(1000 * Math.pow(2, reconnectAttempts - 1), 30000); // Cap at 30 seconds
                        const message = `🔄 Reconnecting (${reconnectAttempts}/${maxReconnectAttempts})...`;
                        updateConnectionStatus('connecting', message);
                        console.log(message, 'Next attempt in', delay, 'ms');
                        setTimeout(() => connectWebSocket(movieId), delay);
                    } else {
                        console.log('Max reconnection attempts reached');
                        updateConnectionStatus('error', '❌ Connection Failed');
                        // Reset reconnection attempts after a longer delay
                        setTimeout(() => {
                            reconnectAttempts = 0;
                            connectWebSocket(movieId);
                        }, 60000); // Try again after 1 minute
                    }
                };
                
                socket.onerror = (error) => {
                    console.error('WebSocket error:', error);
                    updateConnectionStatus('error', '⚠️ Connection Error');
                    // Log additional connection details for debugging
                    console.log('Connection Details:', {
                        url: wsUrl,
                        readyState: socket.readyState,
                        protocol: socket.protocol,
                        host: window.location.host,
                        isProduction: isProduction
                    });
                };
                
                socket.onmessage = (event) => {
                    try {
                        const data = JSON.parse(event.data);
                        console.log('Received message:', data);
                        
                        switch (data.type) {
                            case 'connection':
                                handleConnectionStatus(data);
                                break;
                            case 'seat_blocked':
                                handleSeatBlocked(data.seats);
                                break;
                            case 'seat_booked':
                                handleSeatBooked(data.seats);
                                break;
                            case 'seat_update':
                                handleSeatUpdate(data.occupiedSeats, data.blockedSeats);
                                break;
                            default:
                                console.log('Unknown message type:', data.type);
                        }
                    } catch (error) {
                        console.error('Failed to parse message:', error);
                    }
                };
            } catch (error) {
                console.error('Failed to create WebSocket connection:', error);
                updateConnectionStatus('error', '❌ Connection Failed');
                // Try to reconnect after a delay
                setTimeout(() => connectWebSocket(movieId), 5000);
            }
        }

        function handleConnectionStatus(data) {
            if (data.status === 'connected') {
                console.log('Successfully connected to movie room:', data.movieId);
            }
        }

        function handleSeatUpdate(newOccupiedSeats, newBlockedSeats) {
            document.querySelectorAll('.seat').forEach(seat => {
                const seatId = seat.dataset.seat;
                seat.className = 'seat';
                
                if (newOccupiedSeats.includes(seatId)) {
                    seat.classList.add('occupied');
                } else if (newBlockedSeats.includes(seatId)) {
                    seat.classList.add('temporarily-blocked');
                }
            });
            updateSelectedCount();
        }

        function handleSeatBlocked(seats) {
            seats.forEach(seatId => {
                const seat = document.querySelector(`[data-seat="${seatId}"]`);
                if (seat && !seat.classList.contains('occupied')) {
                    seat.classList.remove('selected');
                    seat.classList.add('temporarily-blocked');
                }
            });
            updateSelectedCount();
        }

        function handleSeatBooked(seats) {
            seats.forEach(seatId => {
                const seat = document.querySelector(`[data-seat="${seatId}"]`);
                if (seat) {
                    seat.classList.remove('selected', 'temporarily-blocked');
                    seat.classList.add('occupied');
                }
            });
            updateSelectedCount();
        }

        // Initialize seats on page load
        const occupiedSeats = new Set(JSON.parse('<%- JSON.stringify(occupiedSeats || []) %>'));
        const blockedSeats = new Set(JSON.parse('<%- JSON.stringify(blockedSeats || []) %>'));

        // UI Elements
        const container = document.querySelector('.seat-container');
        const selectedSeatsElement = document.getElementById('selected-seats');
        const totalPriceElement = document.getElementById('total-price');
        const bookBtn = document.getElementById('book-btn');
        const movieSelect = document.getElementById('movieSelect');

        function getSelectedMoviePrice() {
            const selectedOption = movieSelect.options[movieSelect.selectedIndex];
            return parseInt(selectedOption.dataset.price) || 0;
        }

        function updateSelectedCount() {
            const selectedSeats = document.querySelectorAll('.row .seat.selected');
            const selectedSeatsArray = [...selectedSeats].map(seat => seat.dataset.seat);
            const pricePerSeat = getSelectedMoviePrice();
            
            selectedSeatsElement.textContent = selectedSeatsArray.length > 0 ? selectedSeatsArray.join(', ') : 'None selected';
            totalPriceElement.textContent = selectedSeatsArray.length * pricePerSeat;
            
            bookBtn.disabled = selectedSeatsArray.length === 0;
        }

        // Initialize seats and WebSocket on page load
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.seat').forEach(seat => {
                const seatId = seat.dataset.seat;
                if (occupiedSeats.has(seatId)) {
                    seat.classList.add('occupied');
                } else if (blockedSeats.has(seatId)) {
                    seat.classList.add('temporarily-blocked');
                }
            });
            
            // Get initial movie ID from select
            const selectedOption = movieSelect.options[movieSelect.selectedIndex];
            const initialMovieId = selectedOption ? parseInt(selectedOption.dataset.movieId) : null;
            
            // Initialize WebSocket connection with initial movie ID
            connectWebSocket(initialMovieId);
        });

        // Event Listeners
        container.addEventListener('click', (e) => {
            if (e.target.classList.contains('seat') && 
                !e.target.classList.contains('occupied') && 
                !e.target.classList.contains('temporarily-blocked')) {
                
                e.target.classList.toggle('selected');
                updateSelectedCount();
            }
        });

        movieSelect.addEventListener('change', () => {
            const selectedOption = movieSelect.options[movieSelect.selectedIndex];
            const movieId = parseInt(selectedOption.dataset.movieId);
            
            // Close existing connection if any
            if (socket) {
                socket.close();
            }
            
            // Connect to new movie room
            connectWebSocket(movieId);
            updateSelectedCount();
        });

        bookBtn.addEventListener('click', async () => {
            const selectedSeats = document.querySelectorAll('.row .seat.selected');
            const seats = [...selectedSeats].map(seat => seat.dataset.seat);
            const name = document.getElementById('name').value.trim();
            const email = document.getElementById('email').value.trim();
            const selectedOption = movieSelect.options[movieSelect.selectedIndex];
            const movie = selectedOption ? selectedOption.value : '';
            const movieId = selectedOption ? parseInt(selectedOption.dataset.movieId) : null;
            const amount = parseInt(totalPriceElement.textContent);
            
            if (!name || !email) {
                alert('Please fill in your name and email');
                return;
            }
            
            if (seats.length === 0) {
                alert('Please select at least one seat');
                return;
            }

            if (!movieId) {
                alert('Please select a movie');
                return;
            }

            // Disable button to prevent multiple clicks
            bookBtn.disabled = true;
            bookBtn.textContent = 'Processing...';

            try {
                // Block seats temporarily through WebSocket
                if (socket && socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        type: 'block_seats',
                        movieId,
                        seats
                    }));
                }

                console.log('Submitting booking:', {
                    name,
                    email,
                    movie,
                    movieId,
                    seats,
                    amount
                });

                // Start booking process
                const response = await fetch('/start-booking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        email,
                        movie,
                        movieId,
                        seats,
                        amount
                    }),
                    credentials: 'include'
                });

                const data = await response.json();
                console.log('Booking response:', data);
                
                if (response.ok && data.success) {
                    console.log('Booking successful, redirecting to:', data.redirectUrl);
                    // Add a small delay to ensure session is saved
                    setTimeout(() => {
                        window.location.href = data.redirectUrl;
                    }, 500);
                } else {
                    throw new Error(data.error || 'Booking failed. Please try again.');
                }
            } catch (error) {
                console.error('Booking error:', error);
                alert(error.message || 'An error occurred. Please try again.');
            } finally {
                bookBtn.disabled = false;
                bookBtn.textContent = 'Book Tickets';
            }
        });
    </script>
</body>
</html>