<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movie Seat Booking - Real Time</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .screen {
            background: linear-gradient(45deg, #1a1a1a, #333);
            height: 70px;
            width: 100%;
            margin: 15px 0;
            transform: rotateX(-45deg);
            box-shadow: 0 3px 20px rgba(255,255,255,0.3);
            text-align: center;
            line-height: 70px;
            font-weight: bold;
            color: #fff;
            text-shadow: 0 0 10px rgba(255,255,255,0.5);
            border-radius: 5px;
            position: relative;
            overflow: hidden;
        }
        .screen::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                45deg,
                rgba(255,255,255,0.1) 0%,
                rgba(255,255,255,0.2) 50%,
                rgba(255,255,255,0.1) 100%
            );
            animation: screenGlow 3s ease-in-out infinite;
        }
        @keyframes screenGlow {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }
        .seat-container {
            perspective: 1000px;
            margin: 40px 0;
            padding: 20px;
            background: rgba(0,0,0,0.2);
            border-radius: 10px;
        }
        .row {
            display: flex;
            justify-content: center;
            margin: 5px;
        }
        .seat {
            background-color: #444451;
            height: 30px;
            width: 35px;
            margin: 3px;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        .seat:hover::after {
            content: attr(data-seat);
            position: absolute;
            top: -25px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 100;
        }
        .seat.selected {
            background-color: #6feaf6;
            transform: scale(1.1);
            box-shadow: 0 0 10px rgba(111,234,246,0.5);
        }
        .seat.occupied {
            background-color: #ffffff;
            cursor: not-allowed;
            box-shadow: 0 2px 4px rgba(255,255,255,0.3);
        }
        .seat.temporarily-blocked {
            background-color: #ffc107;
            cursor: not-allowed;
            animation: pulse 2s infinite;
            box-shadow: 0 0 10px rgba(255,193,7,0.5);
        }
        .seat:not(.occupied):not(.temporarily-blocked):hover {
            cursor: pointer;
            transform: scale(1.2);
            background-color: #6feaf6;
        }
        .showcase {
            background: rgba(0,0,0,0.3);
            padding: 15px 20px;
            border-radius: 10px;
            color: #fff;
            list-style-type: none;
            display: flex;
            justify-content: center;
            margin: 20px 0;
            gap: 30px;
        }
        .showcase li {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 10px;
        }
        .showcase .seat {
            margin-right: 10px;
            width: 25px;
            height: 25px;
        }
        .row-label {
            margin-right: 10px;
            width: 30px;
            text-align: right;
            line-height: 35px;
            font-weight: bold;
            color: #fff;
            text-shadow: 0 0 5px rgba(255,255,255,0.3);
        }
        #connection-status {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 8px 16px;
            border-radius: 4px;
            color: white;
            font-weight: bold;
            z-index: 1000;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            gap: 8px;
            backdrop-filter: blur(5px);
        }
        .booking-form {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            margin-bottom: 30px;
        }
        .form-label {
            color: #fff;
            font-weight: 500;
            margin-bottom: 8px;
        }
        .form-control {
            background: rgba(255,255,255,0.9);
            border: none;
            border-radius: 5px;
        }
        .form-control:focus {
            background: #fff;
            box-shadow: 0 0 10px rgba(111,234,246,0.3);
        }
        .booking-summary {
            background: rgba(0,0,0,0.3);
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            color: #fff;
        }
        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.05); }
            100% { opacity: 1; transform: scale(1); }
        }
    </style>
</head>
<body class="bg-dark text-light">
    <div id="connection-status">Connecting...</div>
    <div class="container mt-5">
        <h1 class="text-center mb-4">🎬 Movie Seat Booking</h1>

        <!-- Booking Form -->
        <div class="booking-form">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-4">
                        <label for="movieSelect" class="form-label">Select Movie</label>
                        <select class="form-control" id="movieSelect" required>
                            <option value="">Choose a movie...</option>
                            <% movies.forEach(movie => { %>
                                <option 
                                    value="<%= movie.name %>" 
                                    data-price="<%= movie.price %>" 
                                    data-movie-id="<%= movie.id %>"
                                    <%= selectedMovie && selectedMovie.id === movie.id ? 'selected' : '' %>
                                >
                                    <%= movie.name %> - ₹<%= movie.price %>
                                </option>
                            <% }); %>
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-4">
                        <label for="name" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="name" placeholder="Enter your full name" required>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-4">
                        <label for="email" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="email" placeholder="Enter your email" required>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Seat Legend -->
        <ul class="showcase">
            <li>
                <div class="seat"></div>
                <small>Available</small>
            </li>
            <li>
                <div class="seat selected"></div>
                <small>Selected</small>
            </li>
            <li>
                <div class="seat temporarily-blocked"></div>
                <small>Booking in Progress</small>
            </li>
            <li>
                <div class="seat occupied"></div>
                <small>Booked</small>
            </li>
        </ul>

        <!-- Seat Layout -->
        <div class="seat-container">
            <div class="screen">🎬 SCREEN 🎬</div>
            
            <% const rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q']; %>
            <% rows.forEach(row => { %>
                <div class="d-flex align-items-center">
                    <div class="row-label"><%= row %></div>
                    <div class="row">
                        <% for(let i = 1; i <= 26; i++) { %>
                            <div class="seat" data-seat="<%= row + i %>"></div>
                        <% } %>
                    </div>
                </div>
            <% }); %>
        </div>

        <!-- Booking Summary -->
        <div class="booking-summary text-center">
            <h4 class="mb-3">Booking Summary</h4>
            <p class="mb-2">Selected Seats: <span id="selected-seats" class="fw-bold">None selected</span></p>
            <p class="mb-4">Total Amount: ₹<span id="total-price" class="fw-bold">0</span></p>
            <button class="btn btn-primary btn-lg px-5" id="book-btn" disabled>Book Tickets</button>
        </div>
    </div>

    <script>
        let socket;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;
        let isPolling = false;
        const pollingInterval = 3000; // 3 seconds
        let selectedSeatsMap = new Map(); // Store selected seats

        function updateConnectionStatus(status, message) {
            const statusElement = document.getElementById('connection-status');
            statusElement.textContent = message;
            
            switch (status) {
                case 'connecting':
                    statusElement.style.backgroundColor = '#ff9800';
                    break;
                case 'connected':
                    statusElement.style.backgroundColor = '#4CAF50';
                    break;
                case 'disconnected':
                    statusElement.style.backgroundColor = '#f44336';
                    break;
                case 'error':
                    statusElement.style.backgroundColor = '#ff9800';
                    break;
            }
        }

        function startPolling(movieId) {
            if (isPolling) return;
            isPolling = true;
            console.log('📡 Starting polling fallback');
            updateConnectionStatus('connected', '🔄 Using polling');

            // Function to fetch seat updates
            async function pollSeats() {
                if (!isPolling) return;
                
                try {
                    const response = await fetch(`/seat-status?movieId=${movieId}`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        },
                        credentials: 'include'
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        // Keep selected seats when updating
                        const currentSelectedSeats = [...document.querySelectorAll('.seat.selected')]
                            .map(seat => seat.dataset.seat);
                        handleSeatUpdate(data.occupiedSeats, data.blockedSeats, currentSelectedSeats);
                    }
                } catch (error) {
                    console.error('Polling error:', error);
                }

                // Schedule next poll
                setTimeout(() => pollSeats(), pollingInterval);
            }

            // Start polling
            pollSeats();
        }

        function connectWebSocket(movieId) {
            // Get the base URL from the environment
            const isProduction = window.location.hostname.includes('vercel.app');
            
            // If we're on Vercel, use polling instead of WebSocket
            if (isProduction) {
                startPolling(movieId);
                return;
            }

            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `ws://localhost:3001/ws${movieId ? `?movieId=${movieId}` : ''}`;

            if (socket && socket.readyState !== WebSocket.CLOSED) {
                console.log('Socket is already connected or connecting');
                return;
            }

            updateConnectionStatus('connecting', '🔄 Connecting...');
            console.log('Attempting to connect to WebSocket:', wsUrl);
            
            try {
                socket = new WebSocket(wsUrl);
                
                socket.onopen = () => {
                    console.log('WebSocket connected successfully');
                    updateConnectionStatus('connected', '🟢 Connected');
                    reconnectAttempts = 0;

                    if (movieId) {
                        socket.send(JSON.stringify({
                            type: 'join_movie',
                            movieId
                        }));
                    }
                };
                
                socket.onclose = (event) => {
                    console.log('WebSocket disconnected:', event.code, event.reason);
                    updateConnectionStatus('disconnected', '🔴 Disconnected');
                    
                    if (!isProduction && reconnectAttempts < maxReconnectAttempts) {
                        reconnectAttempts++;
                        const delay = Math.min(1000 * Math.pow(2, reconnectAttempts - 1), 30000);
                        const message = `🔄 Reconnecting (${reconnectAttempts}/${maxReconnectAttempts})...`;
                        updateConnectionStatus('connecting', message);
                        console.log(message);
                        setTimeout(() => connectWebSocket(movieId), delay);
                    } else {
                        // Fall back to polling if WebSocket fails
                        startPolling(movieId);
                    }
                };
                
                socket.onerror = (error) => {
                    console.error('WebSocket error:', error);
                    updateConnectionStatus('error', '⚠️ Connection Error');
                };
                
                socket.onmessage = (event) => {
                    try {
                        const data = JSON.parse(event.data);
                        console.log('Received message:', data);
                        
                        switch (data.type) {
                            case 'connection':
                                handleConnectionStatus(data);
                                break;
                            case 'seat_blocked':
                                handleSeatBlocked(data.seats);
                                break;
                            case 'seat_booked':
                                handleSeatBooked(data.seats);
                                break;
                            case 'seat_update':
                                handleSeatUpdate(data.occupiedSeats, data.blockedSeats);
                                break;
                            default:
                                console.log('Unknown message type:', data.type);
                        }
                    } catch (error) {
                        console.error('Failed to parse message:', error);
                    }
                };
            } catch (error) {
                console.error('Failed to create WebSocket connection:', error);
                updateConnectionStatus('error', '❌ Connection Failed');
                // Fall back to polling
                startPolling(movieId);
            }
        }

        function handleConnectionStatus(data) {
            if (data.status === 'connected') {
                console.log('Successfully connected to movie room:', data.movieId);
            }
        }

        function handleSeatUpdate(newOccupiedSeats, newBlockedSeats, currentSelectedSeats = []) {
            document.querySelectorAll('.seat').forEach(seat => {
                const seatId = seat.dataset.seat;
                const wasSelected = seat.classList.contains('selected');
                
                // Reset classes but preserve selection
                seat.className = 'seat';
                
                if (newOccupiedSeats.includes(seatId)) {
                    seat.classList.add('occupied');
                    // If seat was selected but is now occupied, remove from selection
                    if (wasSelected) {
                        selectedSeatsMap.delete(seatId);
                    }
                } else if (newBlockedSeats.includes(seatId)) {
                    seat.classList.add('temporarily-blocked');
                    // If seat was selected but is now blocked, remove from selection
                    if (wasSelected) {
                        selectedSeatsMap.delete(seatId);
                    }
                } else if (selectedSeatsMap.has(seatId) || currentSelectedSeats.includes(seatId)) {
                    // Restore selection if seat was previously selected and is still available
                    seat.classList.add('selected');
                    selectedSeatsMap.set(seatId, true);
                }
            });
            updateSelectedCount();
        }

        function handleSeatBlocked(seats) {
            seats.forEach(seatId => {
                const seat = document.querySelector(`[data-seat="${seatId}"]`);
                if (seat && !seat.classList.contains('occupied')) {
                    seat.classList.remove('selected');
                    seat.classList.add('temporarily-blocked');
                }
            });
            updateSelectedCount();
        }

        function handleSeatBooked(seats) {
            seats.forEach(seatId => {
                const seat = document.querySelector(`[data-seat="${seatId}"]`);
                if (seat) {
                    seat.classList.remove('selected', 'temporarily-blocked');
                    seat.classList.add('occupied');
                }
            });
            updateSelectedCount();
        }

        // Initialize seats on page load
        const occupiedSeats = new Set(JSON.parse('<%- JSON.stringify(occupiedSeats || []) %>'));
        const blockedSeats = new Set(JSON.parse('<%- JSON.stringify(blockedSeats || []) %>'));

        // UI Elements
        const container = document.querySelector('.seat-container');
        const selectedSeatsElement = document.getElementById('selected-seats');
        const totalPriceElement = document.getElementById('total-price');
        const bookBtn = document.getElementById('book-btn');
        const movieSelect = document.getElementById('movieSelect');

        function getSelectedMoviePrice() {
            const selectedOption = movieSelect.options[movieSelect.selectedIndex];
            return parseInt(selectedOption.dataset.price) || 0;
        }

        function updateSelectedCount() {
            const selectedSeatsArray = Array.from(selectedSeatsMap.keys());
            const pricePerSeat = getSelectedMoviePrice();
            
            selectedSeatsElement.textContent = selectedSeatsArray.length > 0 ? selectedSeatsArray.join(', ') : 'None selected';
            totalPriceElement.textContent = selectedSeatsArray.length * pricePerSeat;
            
            bookBtn.disabled = selectedSeatsArray.length === 0;
        }

        // Initialize seats and WebSocket on page load
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.seat').forEach(seat => {
                const seatId = seat.dataset.seat;
                if (occupiedSeats.has(seatId)) {
                    seat.classList.add('occupied');
                } else if (blockedSeats.has(seatId)) {
                    seat.classList.add('temporarily-blocked');
                }
            });
            
            // Get initial movie ID from select
            const selectedOption = movieSelect.options[movieSelect.selectedIndex];
            const initialMovieId = selectedOption ? parseInt(selectedOption.dataset.movieId) : null;
            
            // Initialize WebSocket connection with initial movie ID
            connectWebSocket(initialMovieId);
        });

        // Event Listeners
        container.addEventListener('click', (e) => {
            if (e.target.classList.contains('seat') && 
                !e.target.classList.contains('occupied') && 
                !e.target.classList.contains('temporarily-blocked')) {
                
                const seatId = e.target.dataset.seat;
                if (e.target.classList.contains('selected')) {
                    e.target.classList.remove('selected');
                    selectedSeatsMap.delete(seatId);
                } else {
                    e.target.classList.add('selected');
                    selectedSeatsMap.set(seatId, true);
                }
                updateSelectedCount();
            }
        });

        movieSelect.addEventListener('change', () => {
            const selectedOption = movieSelect.options[movieSelect.selectedIndex];
            const movieId = parseInt(selectedOption.dataset.movieId);
            
            // Clear selected seats when changing movies
            selectedSeatsMap.clear();
            
            // Close existing connection if any
            if (socket) {
                socket.close();
            }
            
            // Connect to new movie room
            connectWebSocket(movieId);
            updateSelectedCount();
        });

        bookBtn.addEventListener('click', async () => {
            const seats = Array.from(selectedSeatsMap.keys());
            const name = document.getElementById('name').value.trim();
            const email = document.getElementById('email').value.trim();
            const selectedOption = movieSelect.options[movieSelect.selectedIndex];
            const movie = selectedOption ? selectedOption.value : '';
            const movieId = selectedOption ? parseInt(selectedOption.dataset.movieId) : null;
            const amount = parseInt(totalPriceElement.textContent);
            
            if (!name || !email) {
                alert('Please fill in your name and email');
                return;
            }
            
            if (seats.length === 0) {
                alert('Please select at least one seat');
                return;
            }

            if (!movieId) {
                alert('Please select a movie');
                return;
            }

            // Disable button to prevent multiple clicks
            bookBtn.disabled = true;
            bookBtn.textContent = 'Processing...';

            try {
                // Block seats temporarily through WebSocket
                if (socket && socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        type: 'block_seats',
                        movieId,
                        seats
                    }));
                }

                console.log('Submitting booking:', {
                    name,
                    email,
                    movie,
                    movieId,
                    seats,
                    amount
                });

                // Start booking process
                const response = await fetch('/start-booking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        email,
                        movie,
                        movieId,
                        seats,
                        amount
                    }),
                    credentials: 'include'
                });

                const data = await response.json();
                console.log('Booking response:', data);
                
                if (response.ok && data.success) {
                    console.log('Booking successful, redirecting to:', data.redirectUrl);
                    // Clear selected seats before redirecting
                    selectedSeatsMap.clear();
                    // Add a small delay to ensure session is saved
                    setTimeout(() => {
                        window.location.href = data.redirectUrl;
                    }, 500);
                } else {
                    throw new Error(data.error || 'Booking failed. Please try again.');
                }
            } catch (error) {
                console.error('Booking error:', error);
                alert(error.message || 'An error occurred. Please try again.');
            } finally {
                bookBtn.disabled = false;
                bookBtn.textContent = 'Book Tickets';
            }
        });
    </script>
</body>
</html>